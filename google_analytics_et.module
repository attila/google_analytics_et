<?php
/**
 * @file
 * Google Analytics Event Tracking Module.
 *
 * Provides an extention to the google analytics module. Creates an
 * interfacce for reusable event tracking through the google analytics
 * event tracking system.
 */

define('GAET_PATH', drupal_get_path('module', 'google_analytics_et'));
define('GAET_STATUS_TRUE', 1);
define('GAET_STATUS_FALSE', 0);

require_once DRUPAL_ROOT . '/' . GAET_PATH . '/google_analytics_et_api.inc';

/**
 * Implements hook_page_alter().
 */
function google_analytics_et_page_alter(&$page) {
  global $user;

  $id = variable_get('googleanalytics_account', '');

  // Get page status code for visibility filtering.
  $status = drupal_get_http_header('Status');
  $trackable_status_codes = array(
    '403 Forbidden',
    '404 Not Found',
  );

  // Get all selectors defined by google_analytics_et_api hook.
  $selectors = module_invoke_all('api');

  // If the override selectors toggle is TRUE then only load the selectors
  // from the variable table.
  $override_hooked_selectors = variable_get('google_analytics_et_selectors_override', FALSE);
  if ($override_hooked_selectors) {
    $selectors = variable_get('google_analytics_et_selectors', '');
  }

  // Sanitize event tracking input to limit the threat of xss.
  _google_analytics_et_sanitize_event_trackers($selectors);

  $js = array(
    'googleAnalyticsETSettings' => array(
      'selectors' => variable_get('google_analytics_et_selectors', $selectors),
    ),
  );

  if (!empty($id) && (_googleanalytics_visibility_pages() || in_array($status, $trackable_status_codes)) && _googleanalytics_visibility_user($user)) {
    // Get the page scope setting from googleanalytics:
    $scope = variable_get('googleanalytics_js_scope', 'header');
    drupal_add_js($js, 'setting');
    drupal_add_js(drupal_get_path('module', 'google_analytics_et') . '/js/google_analytics_et.js', array('scope' => $scope));
  }
}

/**
 * Set the selector variable
 *
 * This function is intended to be used by glue code or features to set the
 * event tracking without the need of a complicated UI
 *
 * @param array $selectors
 *   The selectors array, this is a multidementional indexed array. Each
 *   element in the array is an array with
 *   the following structure.
 *     array(
 *      'selector' => (String)'p',
 *      'category' => 'String',
 *      'action' => 'String',
 *      'label' => 'String',
 *      'value' => Integer,
 *      'noninteraction' => Boolean,
 *    ),
 *   Read the README.txt file or visit
 *   http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html
 *   for futher explanation.
 *
 * @return bool
 *   TRUE if variable_set is called, FALSE if an array is not passed
 */
function google_analytics_et_set_selectors($selectors) {
  if (!is_array($selectors)) {
    return FALSE;
  }
  vaiable_set('google_analytics_et_selectors', $selectors);
  return TRUE;
}

/**
 * Add a single selector to the list of selectors.
 */
function google_analytics_et_add_event_tracker($selector_array) {
  // Get whole list of event trackers.
  $event_trackers = google_analytics_et_get_event_trackers();

  // Append this event tracker to the end of the list.
  $event_trackers[] = $selector_array;

  // Save list of event trackers.
  variable_set('google_analytics_et_selectors', $event_trackers);
}

/**
 * Remove a single selector from the list of events being tracked.
 */
function google_analytics_et_remove_event_tracker($selector) {
  // Get whole list of event trackers.
  $event_trackers = google_analytics_et_get_event_trackers();
  $new_event_trackers = array();

  // Go through all events and copy all that do not match into the new array.
  if (is_array($event_trackers)) {
    foreach ($event_trackers as $key => $value) {
      if ($event_trackers[$key]['selector'] != $selector) {
        $new_event_trackers[] = $event_trackers[$key];
      }

    }
  }

  // Save list of event trackers.
  variable_set('google_analytics_et_selectors', $new_event_trackers);
}

/**
 * Override the hooked event tracking. Do not load hooks.
 */
function google_analytics_et_override_event_tracking($status = NULL) {
  if ($status == NULL) {
    $new_status = (variable_get('google_analytics_et_selectors_override', NULL)) ? FALSE : TRUE;
    variable_set('google_analytics_et_selectors_override', $new_status);
  }
  elseif (_google_analytics_et_override_event_tracking_validate($status)) {
    variable_set('google_analytics_et_selectors_override', $status);
  }
}

/**
 * Validates the input of the override event input function
 */
function _google_analytics_et_override_event_tracking_validate($status) {
  if ($status == TRUE || $status == FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Sanitizes event tracking data that is being put into javascript.
 */
function _google_analytics_et_sanitize_event_trackers($selectors) {
  $sanitized_selectors = array();

  if (is_array($selectors)) {
    foreach ($selectors as $selector) {
      foreach ($selector as $s) {
        $s = filter_xss($s);
      }

      $sanitzed_selectors[] = $selector;
    }
  }

  return $sanitized_selectors;
}

/**
 * Get the event tracking override status.
 */
function google_analytics_et_get_event_trackering_override_status() {
  $status = variable_get('google_analytics_et_selectors_override', GAET_STATUS_FALSE);

  $status = ($status) ? GAET_STATUS_TRUE : GAET_STATUS_FALSE;

  return $status;
}

/**
 * Get the event trackers.
 */
function google_analytics_et_get_event_trackers() {
  $et = array();

  $et = variable_get('google_analytics_et_selectors', $et);

  return $et;
}

